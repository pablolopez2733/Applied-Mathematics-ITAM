library(readr)
library(ggplot2)
#Lectura de datos
casos <- read_csv("C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Bases de Datos/200624COVID19MEXICO.csv")
View(casos)
confirmados <- casos %>% filter(RESULTADO == 1)
library(tidyverse)
datos <- read_csv("C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Bases de Datos/200624COVID19MEXICO.csv")
confirmados <- datos %>% filter(RESULTADO == 1)
por_dia <- confirmados %>%
group_by(FECHA_INGRESO) %>%
summarise(casos = n())
modelo_cuadratico <- lm(casos ~ poly(FECHA_INGRESO, 2), data = por_dia)
coef(modelo_cuadratico)
futuro <- as.Date("2020-06-29")
prediccion <- predict(modelo_cuadratico, data_frame(FECHA_INGRESO = futuro))
plot <- ggplot(por_dia) +
geom_point(aes(x = FECHA_INGRESO, y = casos)) +
geom_smooth(aes(x = FECHA_INGRESO, y = casos),
method = "lm",
formula = (y ~ poly(x, 2)),
se = F,
fullrange = T) +
geom_point(aes(x = futuro, y = prediccion),
color = "red") +
geom_text(aes(label = "4512 casos"),
x = futuro,
y = prediccion,
vjust = -1) +
theme_classic() +
xlim(as.Date(c("2020-01-13", "2020-07-05"))) +
labs(x = "Fecha",
y = "Casos diarios",
title = "Predicción de casos para el 29-jun",
subtitle = "modelo cuadrático")
plot
View(por_dia)
serie <- confirmados %>% group_by(FECHA_INGRESO) %>% tally()
View(serie)
View(por_dia)
View(serie)
#Ajustamos modelo cuadratico
qm <- lm(n ~ poly(FECHA_INGRESO, 2), data = series)
#Queremos predecir para el día 29 de junio:
dia <- as.Date("2020-06-29")
casos_pred <- predict(qm, data.frame(FECHA_INGRESO = dia))
#solo casos confirmados
confirmados <- casos %>% filter(RESULTADO == 1)
#Hacemos una serie de tiempo:
serie <- confirmados %>% group_by(FECHA_INGRESO) %>% tally()
#Ajustamos modelo cuadratico
qm <- lm(n ~ poly(FECHA_INGRESO, 2), data = serie)
#Queremos predecir para el día 29 de junio:
dia <- as.Date("2020-06-29")
casos_pred <- predict(qm, data.frame(FECHA_INGRESO = dia))
#-------------------------------------
#Tarea: Estimación de casos de COVID
#------------------------------------
#Leemos datos:
library(tidyverse)
library(dplyr)
library(moments)   #install.packages("moments")
library(lubridate) #install.packages("lubridate")
library(readr)
library(ggplot2)
#Lectura de datos
casos <- read_csv("C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Bases de Datos/200624COVID19MEXICO.csv")
View(casos)
#solo casos confirmados
confirmados <- casos %>% filter(RESULTADO == 1)
#Hacemos una serie de tiempo:
serie <- confirmados %>% group_by(FECHA_INGRESO) %>% tally()
#Ajustamos modelo cuadratico
qm <- lm(n ~ poly(FECHA_INGRESO, 2), data = serie)
#Queremos predecir para el día 29 de junio:
dia <- as.Date("2020-06-29")
casos_pred <- predict(qm, data.frame(FECHA_INGRESO = dia))
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_smooth(aes(y = N, x = FECHA_INGRESO), method = "lm",formula = y ~ x, se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1) +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))
proy
#-------------------------------------
#Tarea: Estimación de casos de COVID
#------------------------------------
#Leemos datos:
library(tidyverse)
library(dplyr)
library(moments)   #install.packages("moments")
library(lubridate) #install.packages("lubridate")
library(readr)
library(ggplot2)
#Lectura de datos
casos <- read_csv("C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Bases de Datos/200624COVID19MEXICO.csv")
View(casos)
#solo casos confirmados
confirmados <- casos %>% filter(RESULTADO == 1)
#Hacemos una serie de tiempo:
serie <- confirmados %>% group_by(FECHA_INGRESO) %>% tally()
#Ajustamos modelo cuadratico
qm <- lm(n ~ poly(FECHA_INGRESO, 2), data = serie)
#Queremos predecir para el día 29 de junio:
dia <- as.Date("2020-06-29")
casos_pred <- predict(qm, data.frame(FECHA_INGRESO = dia))
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ x, se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1) +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))
proy
source('C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Tareas/TareaCOVID.R', encoding = 'WINDOWS-1252', echo=TRUE)
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= +1) +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= -2) +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= -1) +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= -.5) +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= -.5,colour="red") +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_point(aes(x = dia, y = casos_pred),color = "red",shape="x") +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= -.5,colour="red") +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_point(aes(x = dia, y = casos_pred),color = "red",shape="x",size=2) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= -.5,colour="red") +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_point(aes(x = dia, y = casos_pred),color = "red",shape="x",size=3) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = -1,hjust= -.5,colour="red") +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_point(aes(x = dia, y = casos_pred),color = "red",shape="x",size=3) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = 0,hjust= -.5,colour="red") +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_point(aes(x = dia, y = casos_pred),color = "red",shape="x",size=3) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = 0,hjust= 0,colour="red") +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_point(aes(x = dia, y = casos_pred),color = "red",shape="x",size=3) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = 0,hjust= -.2,colour="red") +
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
#Ahora sí, vamos a graficarlo todo:
proy <- ggplot(serie) +
geom_point(aes(y = n, x = FECHA_INGRESO)) +
geom_point(aes(x = dia, y = casos_pred),color = "red",shape="x",size=3) +
geom_smooth(aes(y = n, x = FECHA_INGRESO), method = "lm",formula = y ~ poly(x,2), se = FALSE, fullrange=TRUE) +
geom_text(aes(label = "4512 casos"),x = dia,y = casos_pred,vjust = 0,hjust= -.2,colour="red") +
geom_hline(yintercept = casos_pred,color = "red", linetype = "dashed", alpha=0.5)+
geom_vline(xintercept = dia,color = "red", linetype = "dashed", alpha=0.5 )+
theme_minimal() +
xlim(as.Date(c("2020-01-01", "2020-09-05")))+
ylim(c(0,7000))
proy
#Leemos el shapefile
shape_cdmx <- readOGR(dsn = "/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp", layer = "alcaldias")
shp_df <- broom::tidy(shape_cdmx)
map <- ggplot() + geom_polygon(data = shape_cdmx, aes(x = long, y = lat, group = group, fill=id), colour = "black")
map + theme_void()
#intentemos ponerle nombre a cada delegacion
cnames <- aggregate(cbind(long, lat) ~ id, data=shp_df, FUN=mean)
map + geom_text(data = cnames, aes(x = long, y = lat, label = id), size = 4) + theme_void()
#matcheamos el id de cada delegacion con su nombre
id=as.character(c(9,7,1,3,13,14,2,8,15,5,4,0,6,12,11,10))
recuento_delegaciones=cbind(recuento_delegaciones, id)
shp_df <- left_join(shp_df, recuento_delegaciones, by="id")
names(shp_df)[names(shp_df) == "n"] <- "Denuncias"
#merge the two datasets #standardise the values in the Total column to ensure we get an even spread of colours across the map rather than very light or dark colours for outliers
map <- ggplot() + geom_polygon(data = shp_df, aes(x = long, y = lat, group = group, fill=Denuncias), colour = "black")+
labs(title="Llamadas a línea mujeres por alcaldía en la CDMX",subtitle = "Año:2020",caption = "Fuente: Gobierno de la CDMX")+
theme(legend.title = "Llamadas recibidas")
map + theme_void()
source('C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyecto1/Manolo2/Proyecto_Manolo/Estadistica_Aplicada_Proyecto1.R', echo=TRUE)
source('C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyecto1/Manolo2/Proyecto_Manolo/Estadistica_Aplicada_Proyecto1.R', echo=TRUE)
View(linea.mujeres.copia)
recuento_delegaciones <- denuncias.cdmx %>% group_by(MUNICIPIO_USUARIA) %>% tally()
#Leemos el shapefile
shape_cdmx <- readOGR(dsn = "/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp", layer = "alcaldias")
shp_df <- broom::tidy(shape_cdmx)
map <- ggplot() + geom_polygon(data = shape_cdmx, aes(x = long, y = lat, group = group, fill=id), colour = "black")
map + theme_void()
#intentemos ponerle nombre a cada delegacion
cnames <- aggregate(cbind(long, lat) ~ id, data=shp_df, FUN=mean)
map + geom_text(data = cnames, aes(x = long, y = lat, label = id), size = 4) + theme_void()
#matcheamos el id de cada delegacion con su nombre
id=as.character(c(9,7,1,3,13,14,2,8,15,5,4,0,6,12,11,10))
recuento_delegaciones=cbind(recuento_delegaciones, id)
shp_df <- left_join(shp_df, recuento_delegaciones, by="id")
names(shp_df)[names(shp_df) == "n"] <- "Denuncias"
#merge the two datasets #standardise the values in the Total column to ensure we get an even spread of colours across the map rather than very light or dark colours for outliers
map <- ggplot() + geom_polygon(data = shp_df, aes(x = long, y = lat, group = group, fill=Denuncias), colour = "black")+
labs(title="Llamadas a línea mujeres por alcaldía en la CDMX",subtitle = "Año:2020",caption = "Fuente: Gobierno de la CDMX")+
theme(legend.title = "Llamadas recibidas")
map + theme_void()
#------------------------------------------------------------------------------
#Denuncias por delegación en CDMX
#código base tomado de:
#https://rpubs.com/huanfaChen/ggplotShapefile
#------------------------------------------------------------------------------
#Leemos el shapefile
shape_cdmx <- readOGR(dsn = "/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp", layer = "alcaldias")
#Paquetes requeridos
library(tidyverse)
library(cowplot)
library(kableExtra)
library(knitr)
library(lubridate)
library(dplyr)
library(moments)
library(readr)
library(rgdal)
library(broom)
library(scales)
library(zoo)
#Lectura de Datos y Diccionario
linea.mujeres <- read_csv("https://raw.githubusercontent.com/pablolopez2733/Aplicada1/master/Bases%20de%20Datos/linea-mujeres.csv")
diccionario.linea <- read_csv("https://github.com/pablolopez2733/Aplicada1/raw/master/Bases%20de%20Datos/DiccionarioLineaMujeres.csv")
#------------------------------------------------------------------------------
#Denuncias por delegación en CDMX
#código base tomado de:
#https://rpubs.com/huanfaChen/ggplotShapefile
#------------------------------------------------------------------------------
#Leemos el shapefile
shape_cdmx <- readOGR(dsn = "/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp", layer = "alcaldias")
foo <- readOGR("/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos", "alcaldias")
foo <- readOGR("C:\Users\pablo\Desktop\GithubRepos\Aplicada1\Proyecto1", "alcaldias")
foo <- readOGR("\Users\pablo\Desktop\GithubRepos\Aplicada1\Proyecto1", "alcaldias")
file.exists(/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp)
file.exists("/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp")
file.exists("C:\Users\pablo\Desktop\GithubRepos\Aplicada1\Proyecto1")
file.exists("C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp")
"/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp"
file.exists("/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyectos/alcaldias.shp")
getwd()
setwd("C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyecto1")
#------------------------------------------------------------------------------
#Denuncias por delegación en CDMX
#código base tomado de:
#https://rpubs.com/huanfaChen/ggplotShapefile
#------------------------------------------------------------------------------
#Leemos el shapefile
shape_cdmx <- readOGR(dsn = "./alcaldias.shp", layer = "alcaldias")
shp_df <- broom::tidy(shape_cdmx)
#intentemos ponerle nombre a cada delegacion
#matcheamos el id de cada delegacion con su nombre
id=as.character(c(9,7,1,3,13,14,2,8,15,5,4,0,6,12,11,10))
recuento_delegaciones=cbind(recuento_delegaciones, id)
shp_df <- left_join(shp_df, recuento_delegaciones, by="id")
View(recuento_delegaciones)
rm(list = ls())
#Paquetes requeridos
library(tidyverse)
library(cowplot)
library(kableExtra)
library(knitr)
library(lubridate)
library(dplyr)
library(moments)
library(readr)
library(rgdal)
library(broom)
library(scales)
library(zoo)
#Lectura de Datos y Diccionario
linea.mujeres <- read_csv("https://raw.githubusercontent.com/pablolopez2733/Aplicada1/master/Bases%20de%20Datos/linea-mujeres.csv")
diccionario.linea <- read_csv("https://github.com/pablolopez2733/Aplicada1/raw/master/Bases%20de%20Datos/DiccionarioLineaMujeres.csv")
#------------------------------------------------------------------------------
#Denuncias por delegación en CDMX
#código base tomado de:
#https://rpubs.com/huanfaChen/ggplotShapefile
#------------------------------------------------------------------------------
#Leemos el shapefile
setwd("C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyecto1")
shape_cdmx <- readOGR(dsn = "./alcaldias.shp", layer = "alcaldias")
shp_df <- broom::tidy(shape_cdmx)
#intentemos ponerle nombre a cada delegacion
#matcheamos el id de cada delegacion con su nombre
id=as.character(c(9,7,1,3,13,14,2,8,15,5,4,0,6,12,11,10))
recuento_delegaciones=cbind(recuento_delegaciones, id)
#Recuento por delegaciones:
recuento_delegaciones <- denuncias.cdmx %>% group_by(MUNICIPIO_USUARIA) %>% tally()
rm(list = ls())
linea.mujeres <- read_csv("https://raw.githubusercontent.com/pablolopez2733/Aplicada1/master/Bases%20de%20Datos/linea-mujeres2.csv")
diccionario.linea <- read_csv("https://github.com/pablolopez2733/Aplicada1/raw/master/Bases%20de%20Datos/DiccionarioLineaMujeres.csv")
#Delitos en CDMX solamente
library(tidyverse) #Librería de análisis de datos
library(cowplot) #Para poner una gráfica junto a otra
library(kableExtra) #Para hacer tablas bonitas
library(knitr) #Para formato en pdf
library(lubridate) #Para fechas
library(dplyr)
library(moments)
library(ggplot2)
library(plyr)
library(scales)
library(zoo)
#Importamos la base de datos
#Importamos la base de datos
#linea.mujeres <- read.csv("linea-mujeres.csv")
#Creamos una columna nueva que contenga la fecha de las denuncias en formato Date
linea.mujeres <- linea.mujeres%>%mutate(FECHA_HORA_ALTA = ymd(FECHA_HORA_ALTA))
linea.mujeres <- linea.mujeres%>%mutate(fecha = date(FECHA_HORA_ALTA))
################################################################################
################################################################################
#GRAFICA 1
#Creamos una base de datos con el número de llamadas en la delegación Alvaro Obregón en relación a las del resto de la ciudad
conteo_ciudad <- linea.mujeres%>%filter(str_detect(ESTADO_USUARIA,"CIUDAD DE"))%>%
group_by(fecha)%>%
tally()
conteo_obregon <- linea.mujeres%>%filter(str_detect(ESTADO_USUARIA,"CIUDAD DE") & str_detect(MUNICIPIO_USUARIA,"OBREG"))%>%
group_by(fecha)%>%
tally()
conteo_iztapalapa <- linea.mujeres%>%filter(str_detect(MUNICIPIO_USUARIA,"IZTAPALAPA"))%>%group_by(fecha)%>%tally()
conteo_madero <- linea.mujeres%>%filter(str_detect(MUNICIPIO_USUARIA,"MADERO"))%>%group_by(fecha)%>%tally()
obregon_vs_ciudad <- conteo_ciudad%>%
mutate(O = conteo_obregon$n)%>%
mutate(I = conteo_iztapalapa$n)%>%
mutate(G = conteo_madero$n)
#Una vez construda la nueva base de datos, graficamos:
ggplot(obregon_vs_ciudad,aes(x=fecha))+
geom_area(aes(y=n, fill = "Llamadas Ciudad"))+
geom_area(aes(y=I, fill="Llamadas Iztapalapa"))+
geom_area(aes(y=G, fill="Llamadas Gustavo A. Madero"))+
geom_area(aes(y=O, fill="Llamadas Obregón"))
labs(title="Grafica de Area de Conteo de Llamadas",
caption = "Fuente: Base de datos de la CDMX",
y="Conteo")
################################################################################
################################################################################
#GRAFICA 2
#FUNCIONES QUE SERAN NECESARIS PARA ESTA GRAFICA:
#FUNCION 1: recibe el numero de mes y que regrese la abreviaciòn del mes
month.abb <- function(x){
indices <- seq(1,length(x))
y <- indices
for(i in indices){
y[i] <- switch(x[i],"Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic")
}
return(y)
}
#FUNCION 2: recibe un vector de fechas y devuelve el número de la semana del mes
semana_del_mes <- function(x){
indices <- seq(1, length(x))
y <- indices
for(i in indices){
dia <- day(x[i])
semana <- ceiling(dia/7)
y[i] <- semana
}
return(y)
}
#Creamos una base de datos alternativa para crear el calendario:
linea.mujeres.copia <- linea.mujeres%>%
filter(str_detect(MUNICIPIO_USUARIA,"IZTAPALAPA"))%>%
group_by(fecha)%>%
tally()
linea.mujeres.copia$year <- year(linea.mujeres.copia$fecha)
linea.mujeres.copia$yearmonthf <- factor(as.yearmon(linea.mujeres.copia$fecha))
linea.mujeres.copia$monthf <- month.abb(month(linea.mujeres.copia$fecha))
linea.mujeres.copia$monthf <- factor(linea.mujeres.copia$monthf, levels = c("Ene","Feb","Mar","Abr","May","Jun"))
linea.mujeres.copia$week <- week(linea.mujeres.copia$fecha)
linea.mujeres.copia$monthweek <- semana_del_mes(linea.mujeres.copia$fecha)
linea.mujeres.copia$weekdayf <- weekdays(linea.mujeres.copia$fecha)
levels(linea.mujeres.copia$weekdayf)
linea.mujeres.copia$weekdayf <- factor(linea.mujeres.copia$weekdayf,
levels = c("domingo","sábado","viernes","jueves","miércoles","martes","lunes"), order= TRUE)
levels(linea.mujeres.copia$weekdayf)
#Una vez construida la nueva base de datos graficamos
ggplot(linea.mujeres.copia, aes(monthweek, weekdayf, fill = n)) +
geom_tile(colour = "white") +
facet_grid(year~monthf) +
scale_fill_gradient(low="red", high="green") +
labs(x="Semana del Mes",
y="",
title = "Calendario de Mapa de Calor",
subtitle="Conteo de llamadas",
fill="Conteo")
################################################################################
################################################################################
rm(list = ls())
source('C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyecto1/Manolo2/Proyecto_Manolo/Estadistica_Aplicada_Proyecto1.R', echo=TRUE)
linea.mujeres <- read_csv("https://raw.githubusercontent.com/pablolopez2733/Aplicada1/master/Bases%20de%20Datos/linea-mujeres2.csv")
diccionario.linea <- read_csv("https://github.com/pablolopez2733/Aplicada1/raw/master/Bases%20de%20Datos/DiccionarioLineaMujeres.csv")
source('C:/Users/pablo/Desktop/GithubRepos/Aplicada1/Proyecto1/Manolo2/Proyecto_Manolo/Estadistica_Aplicada_Proyecto1.R', echo=TRUE)
ggplot(obregon_vs_ciudad,aes(x=fecha))+
geom_area(aes(y=n, fill = "Llamadas Ciudad"))+
geom_area(aes(y=I, fill="Llamadas Iztapalapa"))+
geom_area(aes(y=G, fill="Llamadas Gustavo A. Madero"))+
geom_area(aes(y=O, fill="Llamadas Obregón"))+
labs(title="Grafica de Area de Conteo de Llamadas",
caption = "Fuente: Base de datos de la CDMX",
color="Lugar de la llamada",
x="Fecha",
y="Conteo")
ggplot(obregon_vs_ciudad,aes(x=fecha))+
geom_area(aes(y=n, fill = "Llamadas Ciudad"))+
geom_area(aes(y=I, fill="Llamadas Iztapalapa"))+
geom_area(aes(y=G, fill="Llamadas Gustavo A. Madero"))+
geom_area(aes(y=O, fill="Llamadas Obregón"))+
labs(title="Grafica de Area de Conteo de Llamadas",
caption = "Fuente: Base de datos de la CDMX",
fill="Lugar de la llamada",
x="Fecha",
y="Conteo")
rm(list = ls())
install.packages("knitr")
install.packages("meme")
#Ajuste si la computadora es Windows
#Lectura de imagen
img<-"http://i0.kym-cdn.com/entries/icons/mobile/000/000/745/success.jpg"
#Creacion del Meme
x <- meme(img)
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
x <- meme(img)
library(meme)
x <- meme(img)
plot(plot(x, size = 2, "Proyecto", "Terminado", color = "white", font = "Sans"))
#Ajuste si la computadora es Windows
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
#Lectura de imagen
img<-"http://i0.kym-cdn.com/entries/icons/mobile/000/000/745/success.jpg"
#Creacion del Meme
x <- meme(img)
plot(plot(x, size = 2, "Proyecto", "Terminado", color = "white", font = "Sans"))
rm(list = ls())
install.packages("extrafont")
library(meme)
library(extrafont)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)#Con esto el código
